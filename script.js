// Generated by CoffeeScript 1.7.1
(function() {
  var NG_OPTIONS_REGEXP, app, sortedKeys;

  app = angular.module('selectize', []);

  NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;

  sortedKeys = function(obj) {
    var key, keys;
    keys = [];
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        keys.push(key);
      }
    }
    return keys.sort();
  };

  app.directive('selectize', function($parse) {
    return {
      require: '?ngModel',
      link: function(scope, element, attributes, ngModel) {
        var displayFn, groupByFn, index, key, keyName, keys, label, locals, match, options, optionsExp, track, trackFn, value, valueFn, valueName, values, valuesFn, _i, _len;
        optionsExp = attributes.selectize;
        match = optionsExp.match(NG_OPTIONS_REGEXP);
        displayFn = $parse(match[2] || match[1]);
        valueName = match[4] || match[6];
        keyName = match[5];
        groupByFn = $parse(match[3] || "");
        valueFn = $parse((match[2] ? match[1] : valueName));
        valuesFn = $parse(match[7]);
        track = match[8];
        trackFn = (track ? $parse(match[8]) : null);
        values = valuesFn(scope);
        index = 0;
        keys = keyName ? sortedKeys(values) : values;
        options = [];
        locals = {};
        for (index = _i = 0, _len = keys.length; _i < _len; index = ++_i) {
          key = keys[index];
          if (keyName) {
            key = keys[index];
            if (key.charAt(0) === "$") {
              continue;
            }
            locals[keyName] = key;
          } else {
            key = index;
          }
          locals[valueName] = values[key];
          label = displayFn(scope, locals);
          value = valueFn(scope, locals);
          options.push({
            id: value,
            title: label
          });
        }
        element.selectize({
          valueField: 'id',
          labelField: 'title',
          searchField: ['title'],
          options: options,
          create: false
        });
        if (!ngModel) {
          return;
        }
        element.on('change', function() {
          return scope.$apply(function() {
            return ngModel.$setViewValue(element.val());
          });
        });
        return ngModel.$render = function() {
          return element.setValue(ngModel.$viewValue);
        };
      }
    };
  });

}).call(this);
